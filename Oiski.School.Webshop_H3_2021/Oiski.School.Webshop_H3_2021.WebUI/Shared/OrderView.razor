@inject HttpClient client


@if (Order != null)
{
    if (Displayed && customer != null)
    {
        <h1>Order: @Order.OrderID - @Order.OrderDate.ToShortDateString()</h1>

        <h2>Buyer: @customer.FirstName @customer.LastName</h2>
    }


    <EditForm Model="Order" OnValidSubmit="PushOrder">
        <DataAnnotationsValidator />

        <InputSelect DisplayName="Delivery Type" @bind-Value="@Order.TypeOfDelivery">
            @foreach (var item in Enum.GetValues(typeof(DeliveryType)))
                {
                <option value="@item">@item</option>
                }
        </InputSelect>

        <InputSelect DisplayName="Delivery Type" @bind-Value="@Order.TypeOfDelivery">
            @foreach (var item in Enum.GetValues(typeof(DeliveryType)))
                {
                <option value="@item">@item</option>
                }
        </InputSelect>

        <button type="submit">Checkout</button>
    </EditForm>


    <table class="table table-striped text-center">
        <thead>
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Total Price</th>
            </tr>
        </thead>
        @foreach (ICartProductBase product in Order.Products)
        {
            <CartProductView CartProduct="product" ReadOnly="Displayed"></CartProductView>
        }
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public IEditableOrder Order { get; set; } = null;

    [Parameter]
    public bool Displayed { get; set; } = false;


    private ICompactCustomerInfo customer = null;

    protected async override Task OnInitializedAsync()
    {
        if (Displayed)
        {
            customer = await client.GetFromJsonAsync<CustomerBase>($"Http://localhost:4020/Controller/Customers/GetBy/ID/{Order.CustomerID}");
        }

        StateHasChanged();
    }

    public void PushOrder()
    {
        client.PostAsJsonAsync<OrderDisplay>("/Controller/Orders/Add", ( OrderDisplay )Order);
    }
}
