@inject HttpClient client
@using Blazored.LocalStorage
@using System.Text.Json
@inject ILocalStorageService localStorage
@* NOTE:
    This component is a Table Row and must be contained within a table tag
*@

@if (product != null && CartProduct != null)
{
    <tr>
        <td>@product.Title</td>
        <td>
            @if (!ReadOnly)
            {
                <button class="btn btn-success oi oi-plus" @onclick="@AddAmount"></button>
                <input class="small text-center" @bind="@CartProduct.Quantity" />
                <button class="btn btn-danger oi oi-minus" @onclick="@RemoveAmount"></button>
            }
            else
            {
                <input class="small text-center" readonly @bind="@CartProduct.Quantity" />
            }
        </td>
        <td>$@($"{(product.Price * CartProduct.Quantity):00.00} ")</td>
    </tr>
}

@code {
    [Parameter]
    public ICartProductBase CartProduct { get; set; }
    private ICompactProductInfo product;
    private IEditableOrder order;

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [CascadingParameter]
    MainLayout Root { get; set; }

    protected async override Task OnInitializedAsync()
    {
        product = await client.GetFromJsonAsync<ProductDisplay>($"Http://localhost:4020/Controller/Products/GetBy/ID/{CartProduct.ProductID}");

        //await Root.UpdateCartIndicator();

        await base.OnInitializedAsync();
    }

    public async Task AddAmount()
    {
        string deOrderJson = await localStorage.GetItemAsStringAsync("Cart");

        order = JsonSerializer.Deserialize<OrderDisplay>(deOrderJson);

        var myProdcut = order.Products.SingleOrDefault(cp => cp.ProductID == product.ProductID);
        myProdcut.Quantity++;

        CartProduct = myProdcut;

        string orderJson = JsonSerializer.Serialize(order);

        await localStorage.SetItemAsStringAsync("Cart", orderJson);

        StateHasChanged();
    }

    public async Task RemoveAmount()
    {
        string deOrderJson = await localStorage.GetItemAsStringAsync("Cart");

        order = JsonSerializer.Deserialize<OrderDisplay>(deOrderJson);

        var collectedProduct = order.Products.SingleOrDefault(cp => cp.ProductID == product.ProductID);

        if (collectedProduct != null && --collectedProduct.Quantity <= 0)
        {
            order.Products.Remove(collectedProduct);
            //await Root.UpdateCartIndicator();
        }

        var afterProduct = order.Products.SingleOrDefault(cp => cp.ProductID == product.ProductID);
        CartProduct = afterProduct;

        string orderJson = JsonSerializer.Serialize(order);

        await localStorage.SetItemAsStringAsync("Cart", orderJson);

        StateHasChanged();
    }
}
