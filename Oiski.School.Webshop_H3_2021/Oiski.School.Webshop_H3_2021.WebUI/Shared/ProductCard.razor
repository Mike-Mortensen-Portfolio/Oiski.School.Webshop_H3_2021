@inject HttpClient client
@inject NavigationManager nav
@using Blazored.LocalStorage
@using System.Text.Json
@inject ILocalStorageService localStorage

<div class="border rounded text-center col-4 m-3" style="max-width:350px;">
    <card>
        @if (Product.ProductImages != null)
        {
            <img class="card-img-top" style="max-height:450px;" src="@("Images/" + Product.ProductImages.First().ImageURL)" />
        }

        <div class="card-body">
            <div>
                <h3><button class="btn btn-link" @onclick="GoToProduct">@Product.Title</button></h3>
                <br />
                <p class="border">@Product.Description</p>
                <br />
                <p>In stock: <b>#</b>@Product.InStock | Price: <b>$</b>@Product.Price</p>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-success" @onclick="AddToCart">Add to Cart</button>
        </div>
    </card>
</div>

@code {
    [Parameter]
    public IProductDisplay Product { get; set; }

    [CascadingParameter]
    public MainLayout Root { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Product = await client.GetFromJsonAsync<ProductDisplay>($"Http://localhost:4020/Controller/Products/GetBy/ID/{Product.ProductID}");
        Product.ProductImages = await client.GetFromJsonAsync<IReadOnlyList<ProductImageBase>>($"Http://localhost:4020/Controller/Products/Get/Images/{Product.ProductID}");
    }

    public void GoToProduct()
    {
        nav.NavigateTo($"/Products/Details/{Product.ProductID}");
    }

    public async Task AddToCart()
    {
        if (!await localStorage.ContainKeyAsync("Cart"))
        {
            OrderDisplay newOrder = new OrderDisplay()
            {
                Products = new List<CartProductBase>()
{
                    new CartProductBase
                    {
                        ProductID = Product.ProductID,
                        Quantity = 1
                    }
                }
            };


            string cartJson = JsonSerializer.Serialize(newOrder);

            await localStorage.SetItemAsStringAsync("Cart", cartJson);

            await Root.UpdateCartIndicator();

            StateHasChanged();

            return;
        }

        string deCartJson = await localStorage.GetItemAsStringAsync("Cart");

        IEditableOrder order = JsonSerializer.Deserialize<OrderDisplay>(deCartJson);

        ICartProductBase product = order.Products.SingleOrDefault(p => p.ProductID == Product.ProductID);

        if (product != null)
        {
            product.Quantity++;
        }
        else
        {
            order.Products.Add(new CartProductBase
            {
                ProductID = Product.ProductID,
                Quantity = 1
            });
        }

        string restoreCartJson = JsonSerializer.Serialize(order);

        await localStorage.SetItemAsStringAsync("Cart", restoreCartJson);

        await Root.UpdateCartIndicator();

        StateHasChanged();
    }
}