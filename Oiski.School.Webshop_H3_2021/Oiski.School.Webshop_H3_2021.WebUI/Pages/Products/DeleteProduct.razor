@page "/Products/Delete/{ProductID:int}"
@inject HttpClient client
@inject NavigationManager nav
@inject IToastService toastService


@if (Product != null)
{
    <div class="row">
        <div class="border col-4">
            <card>
                <div class="text-center">
                    @if (Product.ProductImages != null)
                    {
                        <img style="max-height:450px;" src="@("Images/" + Product.ProductImages.First().ImageURL)" />
                    }
                </div>
            </card>
        </div>
        <div class="border col-8">
            <card>
                <div class="card-body text-center">
                    <h3 class="card-title">You about to delete: @Product.Title</h3>
                    <hr />
                    <br />
                    <p><b>Description:</b> @Product.Description</p>
                    <br />
                    <p><b>In stock:</b> @Product.InStock</p>
                    <br />
                    <p><b>Brand:</b> @Brand.Name |&nbsp;<b>Category:</b> @Category.Name </p>
                    <br />
                    <p>Price: <b>$</b>@Product.Price</p>
                </div>
                <div class="card-footer">
                    <p class="text-danger"><b>Are you sure you wanna do this?</b></p>
                    <button @onclick='() => nav.NavigateTo($"/Products/Edit/{Product.ProductID}")' class="btn btn-primary">Cancel</button> | <button @onclick="DeletingProduct" class="btn btn-danger">Delete Product</button>
                </div>
            </card>
        </div>
    </div>

}
else
{
    <p>Du lort, Jasmin</p>
}

@code {
    [Parameter]
    public int ProductID { get; set; }

    private IEditableProduct Product { get; set; }
    private IBrandBase Brand { get; set; }
    private ICategoryBase Category { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Product = await client.GetFromJsonAsync<EditableProduct>($"Http://localhost:4020/Controller/Products/GetBy/ID/{ProductID}");
        Product.ProductImages = await client.GetFromJsonAsync<IReadOnlyList<ProductImageBase>>($"Http://localhost:4020/Controller/Products/Get/Images/{Product.ProductID}");
        Brand = await client.GetFromJsonAsync<BrandBase>($"Http://localhost:4020/Controller/Products/Get/Brand/{Product.ProductID}");
        Category = await client.GetFromJsonAsync<CategoryBase>($"Http://localhost:4020/Controller/Products/Get/Category/{Product.ProductID}");
    }

    public async Task DeletingProduct()
    {
        var response = await client.DeleteAsync("Http://localhost:4020/Controller/Products/Remove/{Product.ProductID}");

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            toastService.ShowSuccess($"You've deleted the product: {Product.Title}");
            nav.NavigateTo("/");
        }
        else
        {
            toastService.ShowError("Couldn't delete the product. Try again.");
        }
    }
}